@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Html;
@using LiteAbpUBD.Business
@using Volo.Abp.SettingManagement
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Mvc.Infrastructure
@using LiteAbpUBD.Business.Dtos
@inject IAuthorizationService authorizationService
@inject ISettingManager settingManager
@inject IActionDescriptorCollectionProvider actionDescriptorCollectionProvider

@{
    var menus = new List<MenuDto>();
    var menusJson = await settingManager.GetOrNullGlobalAsync("Site.MenuJson");
    if (!string.IsNullOrWhiteSpace(menusJson))
        menus = JsonConvert.DeserializeObject<List<MenuDto>>(menusJson);

    var routePolicy = actionDescriptorCollectionProvider.ActionDescriptors.Items
                                                     .Select(x => new
                                                     {
                                                         RoutePath = $"/{x.RouteValues["Controller"]?.ToLower()}/{x.RouteValues["Action"]?.ToLower()}",
                                                         Policy = ((AuthorizeAttribute)x.EndpointMetadata.FirstOrDefault(e => e is AuthorizeAttribute))?.Policy
                                                     })
                                                     .ToList();

    Func<int, bool> hasPermissionFunc = null;
    hasPermissionFunc = (id) =>
    {
        var menu = menus.FirstOrDefault(x => x.Id == id);
        if (menu == null)
            return false;

        var policy = string.IsNullOrWhiteSpace(menu.Route) ? null : routePolicy.FirstOrDefault(rp => menu.Route.Equals(rp.RoutePath, StringComparison.OrdinalIgnoreCase) || (menu.Route + "/index").Equals(rp.RoutePath, StringComparison.OrdinalIgnoreCase))?.Policy;

        if (!string.IsNullOrWhiteSpace(menu.Route) && string.IsNullOrWhiteSpace(policy))
            return true;

        if (!string.IsNullOrWhiteSpace(policy) && authorizationService.AuthorizeAsync(policy).Result.Succeeded)
            return true;
        foreach (var item in menus.Where(x => x.Pid == id))
        {
            if (hasPermissionFunc(item.Id))
                return true;
        }

        return false;
    };
}

@foreach (var menu1 in menus.Where(x => x.Pid == 0).OrderByDescending(x => x.Order))
{
    var hasPermission = hasPermissionFunc(menu1.Id);
    var menu1ChildMenus = menus.Where(x => x.Pid == menu1.Id).OrderByDescending(x => x.Order);
    if (hasPermission)
    {
        <li class="nav-item @(menu1ChildMenus.Any()?"dropdown":"")">
            <a @(new HtmlString(menu1ChildMenus.Any()?"class=\"nav-link dropdown-toggle\" href=\"#navbar-base\" data-bs-toggle=\"dropdown\" data-bs-auto-close=\"false\" role=\"button\" aria-expanded=\"false\"":$"class=\"nav-link\" href=\"{(menu1.Route??"#")}\""))>
                <span class="nav-link-icon d-md-none d-lg-inline-block">
                    @switch (menu1.Icon)
                    {
                        case "home":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><polyline points="5 12 3 12 12 3 21 12 19 12"></polyline><path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path><path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"></path></svg>
                            break;
                        case "menu":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-menu" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <line x1="4" y1="8" x2="20" y2="8"></line>
                                <line x1="4" y1="16" x2="20" y2="16"></line>
                            </svg>
                            break;
                        case "user":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-user" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                                <path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path>
                            </svg>
                            break;
                        case "data":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-article" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <rect x="3" y="4" width="18" height="16" rx="2"></rect>
                                <path d="M7 8h10"></path>
                                <path d="M7 12h10"></path>
                                <path d="M7 16h10"></path>
                            </svg>
                            break;
                        case "chart":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-align-box-bottom-center" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <rect x="4" y="4" width="16" height="16" rx="2"></rect>
                                <path d="M9 15v2"></path>
                                <path d="M12 11v6"></path>
                                <path d="M15 13v4"></path>
                            </svg>
                            break;
                        case "more":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><rect x="4" y="4" width="6" height="5" rx="2"></rect><rect x="4" y="13" width="6" height="7" rx="2"></rect><rect x="14" y="4" width="6" height="7" rx="2"></rect><rect x="14" y="15" width="6" height="5" rx="2"></rect></svg>
                            break;
                        case "extra":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-puzzle" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M4 7h3a1 1 0 0 0 1 -1v-1a2 2 0 0 1 4 0v1a1 1 0 0 0 1 1h3a1 1 0 0 1 1 1v3a1 1 0 0 0 1 1h1a2 2 0 0 1 0 4h-1a1 1 0 0 0 -1 1v3a1 1 0 0 1 -1 1h-3a1 1 0 0 1 -1 -1v-1a2 2 0 0 0 -4 0v1a1 1 0 0 1 -1 1h-3a1 1 0 0 1 -1 -1v-3a1 1 0 0 1 1 -1h1a2 2 0 0 0 0 -4h-1a1 1 0 0 1 -1 -1v-3a1 1 0 0 1 1 -1"></path>
                            </svg>
                            break;
                        case "notice":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-bell-ringing" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M10 5a2 2 0 0 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"></path>
                                <path d="M9 17v1a3 3 0 0 0 6 0v-1"></path>
                                <path d="M21 6.727a11.05 11.05 0 0 0 -2.794 -3.727"></path>
                                <path d="M3 6.727a11.05 11.05 0 0 1 2.792 -3.727"></path>
                            </svg>
                            break;
                        case "like":
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z"></path></svg>
                            break;
                    }
                </span>
                <span class="nav-link-title">
                    @menu1.Title
                </span>
            </a>
            @if (menu1ChildMenus.Any())
            {
                <div class="dropdown-menu">
                    <div class="dropdown-menu-columns">
                        <div class="dropdown-menu-column">
                            @foreach (var menu2 in menu1ChildMenus)
                            {
                                hasPermission = hasPermissionFunc(menu2.Id);
                                var menu2ChildMenus = menus.Where(x => x.Pid == menu2.Id).OrderByDescending(x => x.Order);
                                @if (hasPermission)
                                {
                                    @if (!menu2ChildMenus.Any())
                                    {
                                        <a class="dropdown-item" href="@(menu2.Route??"#")">
                                            @menu2.Title
                                        </a>
                                    }
                                    else
                                    {
                                        <div class="dropend">
                                            <a class="dropdown-item dropdown-toggle" href="#sidebar-cards" data-bs-toggle="dropdown" data-bs-auto-close="false" role="button" aria-expanded="false">
                                                @menu2.Title
                                            </a>
                                            <div class="dropdown-menu">
                                                @foreach (var menu3 in menu2ChildMenus)
                                                {
                                                    <a href="@(menu3.Route??"#")" class="dropdown-item">
                                                        @menu3.Title
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        </li>
    }
}
